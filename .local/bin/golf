#!/bin/bash

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
OUTPUT_DIR="$XDG_CONFIG_HOME/customgolf"
CURRENT_PAGE_FILE="$OUTPUT_DIR/current_page.txt"

should_exit=0
selected=''

function display_help {
	echo "Usage: $0 [OPTIONS]"
	echo "Browse VimGolf challenges and interact with them."
	echo
	echo "Options:"
	echo "  --update       Update local cache of VimGolf challenges."
	echo "  --help         Display this help message."
	echo
	echo "Description:"
	echo "  This script allows you to browse VimGolf challenges, interact with them,"
	echo "  and update the local cache of challenges for faster interactions."
	echo
	echo "Examples:"
	echo "  $0                # Start browsing VimGolf challenges interactively."
	echo "  $0 --update       # Update the local cache of VimGolf challenges."
	echo "  $0 --help         # Display this help message."
	echo
	echo "Author:"
	echo "  ysxninja  :::: https://github.com/ysxninja"
	exit 0
}

function display_challenges {
	local page=$1
	local output_file="$OUTPUT_DIR/page_$page.txt"

	if [ ! -f "$output_file" ]; then
		if ! curl -L -s "http://www.vimgolf.com/?page=$page" >"$output_file"; then
			echo "Error: Unable to fetch VimGolf challenges for page $page. Continuing..."
			return 1
		fi
	fi

	selected=$(fzf --delimiter="::" --preview="echo {} | awk -F '::' '{print \$NF}'" --preview-window=up,3:wrap <"$output_file" | awk -F '::' '{print $1}' | tr -d '[:space:]')
	echo "Debug: Selected: $selected"

	if [ "${#selected}" -eq 24 ]; then
		echo "Debug: Starting VimGolf! challenge ID: $selected"
		vimgolf put "$selected"
	else
		echo "${#selected}"
		echo "Debug: Invalid challenge ID. Please enter a valid 24-character ID."
	fi
}

function update_data {
	rm -rf "$OUTPUT_DIR" # Remove the existing output files
	mkdir -p "$OUTPUT_DIR"
	touch "$CURRENT_PAGE_FILE"
	for page in {1..12}; do
		curl -L -s "http://www.vimgolf.com/?page=$page" | tr -d '\n' | grep -oP '\/challenges\/([a-z0-9]+)">([^<]+)<\/a>.*?<p>([^<]+)<\/p>' | sed -n 's#.*challenges/\([^"]*\)">\(.*\)</a>.*<p>\(.*\)</p>.*#\1 :: \2 :: \3#p' >"$OUTPUT_DIR/page_$page.txt"
	done
}

function handle_input {
	local page

	while ((should_exit != 1)); do
		echo
		echo "Action:"
		echo "[N]ext, [P]revious, Page [N], [Q]uit, [U]pdate, [challenge ID]"

		read -r -p '>> ' prompt

		case $prompt in
		[Nn])
			page=$(<"$CURRENT_PAGE_FILE")
			page=$((page + 1))
			if [ $page -le 12 ]; then
				display_challenges "$page" # Call display_challenges with the updated page
				echo "$page" >"$CURRENT_PAGE_FILE"
			else
				echo "Debug: Already at the last page."
			fi
			;;
		[Pp])
			page=$(<"$CURRENT_PAGE_FILE")
			page=$((page - 1))
			echo "Debug: Going to the previous page. New page: $page"
			if [ $page -ge 1 ]; then
				display_challenges "$page" # Call display_challenges with the updated page
				echo "$page" >"$CURRENT_PAGE_FILE"
			else
				echo "Debug: Already at the first page."
			fi
			;;
		[0-9])
			page=$prompt
			display_challenges "$page" # Call display_challenges with the updated page
			echo "$page" >"$CURRENT_PAGE_FILE"
			;;
		[Qq])
			echo "Debug: Quitting. should_exit set to 1."
			should_exit=1
			;;
		[Uu])
			echo "Debug: Updating data..."
			update_data
			echo "Debug: Data updated successfully."
			;;
		[a-zA-Z0-9]*)
			if [ "${#prompt}" -eq 24 ]; then
				echo "Debug: Starting VimGolf! challenge ID: $prompt"
				vimgolf put "$prompt"
			else
				echo "Debug: Invalid challenge ID. Please enter a valid 24-character ID."
			fi
			;;
		*)
			echo "Invalid input. Please try again."
			;;
		esac
	done
}

function check_dependencies {
	command -v curl >/dev/null 2>&1 || {
		echo >&2 "Error: curl not found. Please install it."
		exit 1
	}
	command -v vimgolf >/dev/null 2>&1 || {
		echo >&2 "Error: vimgolf not found. Please install it."
		exit 1
	}
	command -v fzf >/dev/null 2>&1 || {
		echo >&2 "Error: fzf not found. Please install it."
		exit 1
	}
}

function initialize {
	check_dependencies
	mkdir -p "$OUTPUT_DIR"
	touch "$CURRENT_PAGE_FILE"
}

initialize

# Check for --update or --help option
while [[ $# -gt 0 ]]; do
	case $1 in
	--update)
		echo "Debug: Updating data..."
		update_data
		echo "Debug: Data updated successfully."
		exit 0
		;;
	--help)
		display_help
		;;
	*)
		echo "Error: Unknown option: $1"
		echo "Use --help for usage information."
		exit 1
		;;
	esac
	shift
done

function mygolf {
	local page=1

	while ((should_exit != 1)); do
		display_challenges $page
		handle_input $page
	done
}

mygolf
